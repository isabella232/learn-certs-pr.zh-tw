### YamlMime:Course
title: Designing and Implementing Microsoft DevOps solutions
metadata:
  title: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
  description: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
uid: course.az-400t00
courseNumber: 'AZ-400T00-A'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 規劃共用目標和時間表的轉換
- skill: 選擇一個專案並識別專案指標和 KPI
- skill: 建立團隊和敏捷的組織結構
- skill: 描述使用原始檔控制的好處。
- skill: 從 TFVC 移轉到 Git
- skill: 擴充企業 DevOps 的 Git
- skill: 建議成品管理工具與作法
- skill: 抽象一般套件以啟用共用與重複使用
- skill: 移轉和合併成品
- skill: 移轉和整合原始檔控制措施
- skill: 管理應用程式設定和密碼
- skill: 開發專案品質策略
- skill: 規劃安全的開發最佳做法和合規性規則
- skill: 實作與管理基礎架構的構建
- skill: 解釋為什麼持續整合很重要
- skill: 使用 Azure DevOps 實作持續整合
- skill: '管理程式碼品質，包括：技術債務，SonarCloud 和其他工具解決方案'
- skill: 使用開放原始碼，OWASP 和 WhiteSource Bolt 管理安全原則
- skill: 實作容器策略，包括容器與虛擬機器的區別以及微服務如何使用容器
- skill: 使用 Docker 實作容器
- skill: 檢查開放原始碼軟體套件的安全性和授權合規性，以符合公司標準
- skill: 設定組建管線以存取套件安全性和授權分級
- skill: 設定對套件摘要的安全存取
- skill: 檢查程式碼基底以識別可以轉換為包套件的程式碼相依性
- skill: 識別並建議整個解決方法中的標準化軟體套件類型與版本
- skill: 重構現有建置管線以實現發行套件的版本策略
- skill: 管理安全性與合規性
- skill: 區分發行和部署
- skill: 定義發行管線的元件
- skill: 解釋設計發行策略時要考慮的事項
- skill: 將發行與發行流程進行分類，並概述如何控制兩者的品質
- skill: 描述發行閘道的準則以及如何處理版本資訊和文件
- skill: 解釋傳統意義上和現代意義上的部署模式
- skill: 選擇版本管理工具
- skill: 解釋 Azure DevOps 和其他發行管理工具中使用的術語
- skill: 描述什麼是組建與版本工作，它可以做什麼以及一些可用的部署工作
- skill: 對代理程式，代理程式佇列和代理程式集區進行分類
- skill: 說明為什麼有時您需要在一個發行管線中進行多個發行作業
- skill: 區分多個代理程式和多個設定發行作業
- skill: 在您的發行管線中使用發行變數和階段變數
- skill: 使用服務連線安全部署到環境
- skill: 將測試內嵌管線中
- skill: 透過使用警示，服務掛勾和報告，列出檢查管線健康情況和發行的不同方法
- skill: 建立釋放閘道
- skill: 描述部署模式
- skill: 實作藍綠色部署
- skill: 實作 Canary Release
- skill: 實作漸進式曝光部署
- skill: 設定用戶端應用程式的毀損報告整合
- skill: 開發監控與狀態儀表板
- skill: 實作客戶端應用程式崩潰報告資料的路由
- skill: 實作工具以追蹤系統使用情況，功能使用情況與程序
- skill: 整合和設定開發團隊工作管理的票證系統
- skill: 實施行動 DevOps 策略
- skill: 將基礎結構和設定套用為代碼準則。
- skill: 使用 Microsoft 自動化技術，例如 ARM 範本，PowerShell 和 Azure CLI，部署和管理基礎結構
- skill: 描述 Azure 可用的部署模型和服務
- skill: 部署和設定受管理 Kubernetes 叢集
- skill: 使用 Azure 的第三方工具和服務來部署和設定基礎結構，例如 Chef，Puppet，Ansible，SaltStack 和 Terraform
- skill: 為發行管線和應用程式基礎結構定義基礎結構和設定策略以及適當的工具組
- skill: 在您的應用程式基礎結構中實作合規性和安全性
- skill: 設計最佳做法以衡量終端使用者滿意度
- skill: 設計流程以擷取和分析來自外部來源的使用者回饋
- skill: 設計客戶端應用程式崩潰報告資料的路由
- skill: 建議監視工具與技術
- skill: 建議系​​統與功能使用情況追蹤工具
- skill: 分析警示以建立基準線
- skill: 分析遙測以建立基準線
- skill: 執行即時網站檢閱並擷取系統中斷的回饋
- skill: 執行持續調整以減少無意義或無法運作的警示
learningPartnersLink: /learn/certifications/partners
locales:
- en
- ja
- zh-cn
- ko
levels:
- advanced
roles:
- devops-engineer
products:
- azure
- azure-devops
- azure-kubernetes-service
- azure-container-instances
- azure-automation
exams:
- uid: exam.az-400
summary: |-
  本課程提供設計和實作 DevOps 流程和最佳做法的知識和技能。學生將學習如何規劃 DevOps，使用原始檔控制，為企業擴充 Git，合併 Artifacts，設計相依性管理策略，管理密碼，實作持續整合，實作容器組建策略，設計發行策略，設定發行管理工作流程，實作部署模式並最佳化回饋機制。

  #### 對象設定檔
  本課程的學生對實作 DevOps 流程或通過 Microsoft Azure DevOps Solutions 認證測驗感興趣。
prerequisitesSection: |-
  關於 Azure，版本控制，敏捷軟體開發和核心軟體開發原則的基礎知識。在提供軟體的組織中擁有經驗會很有幫助。
outlineSection: |-
  ### 模組 1&#58; 規劃 DevOps
  #### 課程
  - 轉換規劃
  - 專案選擇
  - 團隊結構
  - 移轉到 Azure DevOps

  #### 實驗室&#58; 使用 Azure Boards 進行敏捷規劃和組合管理

  完成本單元後，學生將能夠&#58; 
  - 規劃共用目標和時間表的轉換
  - 選擇一個專案並識別專案指標和 KPI
  - 建立團隊和敏捷的組織結構
  - 設計一個工具整合策略
  - 設計授權管理策略(例如 VSTS 使用者)
  - 設計從工作項目到工作軟體的端點對端點可追溯性策略
  - 設計身份驗證與存取策略
  - 設計者與內部部署與雲資源的策略


  ### 模組 2&#58; 原始檔控制入門
  #### 課程
  - 什麼是原始檔控制
  - 原始檔控制的好處
  - 原始檔控制系統的類型
  - Azure Repos 簡介
  - GitHub 簡介
  - 從 Team Foundation 版本控制(TFVC)移轉到 Azure Repos 中的 Git
  - 在 Azure Repos 中向 Git 進行驗證

  #### 實驗室&#58; 用 Git 進行版本控制

  完成本單元後，學生將能夠&#58;
  - 描述使用原始檔控制的好處。 
  - 描述 Azure Repos 和 GitHub
  - 從 TFVC 移轉到 Git 


  ### 模組 3&#58; 擴充企業 DevOps 的 Git
  #### 課程
  - 如何構建您的 Git 儲存機制
  - Git 分支工作流程
  - 與 Azure Repos 中的提取要求進行共同作業
  - 為什麼要關心 GitHooks
  - 促進內部來源

  #### 實驗室&#58; 提取要求的程式碼檢閱

  完成本單元後，學生將能夠&#58;
  - 說明如何構建 Git 儲存機制 
  - 說明 Git 分支工作流程
  - 利用提取要求進行共同作業和程式碼檢閱 
  - 利用自動化的 Git 掛勾 
  - 使用 Git 促進整個組織的內部來源


  ### 模組 4&#58; 合併 Artifacts 並設計相依性管理策略 
  #### 課程
  - 封裝相依性
  - 封裝管理
  - 移轉和合併成品

  #### 實驗室&#58; 更新套件

  完成本單元後，學生將能夠&#58;
  - 建議成品管理工具與作法
  - 抽象一般套件以啟用共用與重複使用
  - 移轉和合併成品
  - 移轉和整合原始檔控制措施 


  ### 模組 5&#58; 使用 Azure Pipelines 實作持續整合
  #### 課程
  - DevOps 中的管線概念
  - Azure Pipelines
  - 評估託管與私人代理程式的使用
  - 代理程式集區
  - 管線與並行
  - Azure DevOps 和開放原始碼專案(公用專案)
  - Azure Pipelines YAML vs Visual Designer
  - 持續整合概述
  - 實作一個組建策略
  - 與 Azure Pipelines 整合
  - 將外部原始檔控制與 Azure Pipelines 整合
  - 設定私人的代理程式
  - 分析和整合 Docker 多階段組建

  #### 實驗室&#58; 啟用與 Azure Pipelines 的持續整合

  #### 實驗室&#58; 將外部原始檔控制與 Azure Pipelines 整合

  完成本單元後，學生將能夠&#58;
  - 實作與管理基礎架構的構建
  - 解釋為什麼持續整合很重要
  - 使用 Azure DevOps 實作持續整合


  ### 模組 6&#58; 管理應用程式設定和密碼 
  #### 課程
  - 安全性簡介
  - 實作安全且合規的開發流程
  - 重新考慮應用程式設定資料
  - 管理秘密，權杖與憑證
  - 實作用於管理管線中的安全性和合規性的工具 

  #### 實驗室&#58; 將 Azure Key Vault 與 Azure DevOps 整合

  完成本單元後，學生將能夠&#58;
  - 管理應用程式設定和密碼
  - 實作用於管理管線中的安全性和合規性的工具


  ### 模組 7&#58; 管理程式碼品質和安全性原則
  #### 課程
  - 管理程式碼品質
  - 管理安全性原則

  #### 實驗室&#58; 使用 Azure DevOps 和 SonarCloud 管理技術債務

  完成本單元後，學生將能夠&#58;
  - 管理程式碼品質，包括&#58;技術債務 SonarCloud 和其他工具解決方案
  - 使用開放原始碼和 OWASP 管理安全性原則


  ### 模組 8&#58; 實作容器組建策略
  #### 課程
  - 實作組建容器策略

  #### 實驗室&#58; 使用 Azure 對現有的 ASP.NET 應用程式進行現代化

  完成本單元後，學生將能夠&#58;
  - 實作容器策略，包括容器與虛擬機器的區別以及微服務如何使用容器
  - 使用 Docker 實作容器


  ### 模組 9&#58; 管理成品版本設定，安全性和合規性
  #### 課程
  - 封裝安全性
  - 開放原始碼
  - 整合授權和弱點掃描
  - 實作版本控制策略 

  #### 實驗室&#58; 使用 WhiteSource 管理開放原始碼安全性和授權

  完成本單元後，學生將能夠&#58;
  - 檢查開放原始碼軟體套件的安全性和授權合規性，以符合公司標準
  - 設定組建管線以存取套件安全性和授權分級
  - 設定對套件摘要的安全存取
  - 檢查程式碼基底以識別可以轉換為包套件的程式碼相依性
  - 識別並建議整個解決方法中的標準化軟體套件類型與版本
  - 重構現有建置管線以實現發行套件的版本策略
  - 管理安全性與合規性


  ### 模組 10&#58; 設計發行策略
  #### 課程
  - 持續傳遞簡介
  - 發行策略建議
  - 建立高品質的發行管線
  - 選擇部署模式
  - 選擇正確的發行管理工具 

  完成本單元後，學生將能夠&#58;
  - 區分發行和部署
  - 定義發行管線的元件
  - 解釋設計發行策略時要考慮的事項
  - 將發行與發行流程進行分類，並概述如何控制兩者的品質
  - 描述發行閘道的準則以及如何處理版本資訊和文件
  - 解釋傳統意義上和現代意義上的部署模式
  - 選擇版本管理工具


  ### 模組 11&#58; 設定發行管理工作流程
  #### 課程
  - 建立發行管線
  - 佈建和設定環境
  - 管理和模組化工作和範本
  - 將密碼與發行管線整合
  - 設定自動化整合和功能測試自動化
  - 自動化檢查健康情況

  #### 實驗室&#58; 使用 YAML 將管線設定為代碼

  #### 實驗室&#58; 使用 Azure 金鑰保存庫在管線中設定密碼

  #### 實驗室&#58; 設定和執行功能測試 

  #### 實驗室&#58; 使用 Azure Monitor 作為釋放閘道

  #### 實驗室&#58; 建立發行儀表板

  完成本單元後，學生將能夠&#58;
  - 解釋 Azure DevOps 和其他發行管理工具中使用的術語
  - 描述什麼是組建與版本工作，它可以做什麼以及一些可用的部署工作
  - 對代理程式，代理程式佇列和代理程式集區進行分類
  - 說明為什麼有時您需要在一個發行管線中進行多個發行作業
  - 區分多個代理程式和多個設定發行作業
  - 在您的發行管線中使用發行變數和階段變數
  - 使用服務連線安全部署到環境
  - 將測試內嵌管線中
  - 透過使用警示，服務掛勾和報告，列出檢查管線健康情況和發行的不同方法
  - 建立釋放閘道


  ### 模組 12&#58; 實作適當的部署模式
  #### 課程
  - 部署模式簡介
  - 實作藍綠色部署
  - 功能切換
  - Canary 發行
  - 灰度發佈
  - AB 測試
  - 漸進式曝光部署

  #### 實驗室&#58; 使用 LaunchDarkly 和 Azure DevOps 進行功能標幟管理

  完成本單元後，學生將能夠&#58;
  - 描述部署模式
  - 實作藍綠色部署
  - 實作 Canary Release
  - 實作漸進式曝光部署


  ### 模組 13&#58; 實作將系統回饋路由到開發團隊的流程
  #### 課程
  - 實作工具以追蹤系統使用情況，功能使用情況與程序
  - 實作行動應用程式毀損報告資料的路由
  - 開發監控與狀態儀表板
  - 整合和設定票證系統

  #### 實驗室&#58; 監控應用程式效能

  完成本單元後，學生將能夠&#58;
  - 設定用戶端應用程式的毀損報告整合
  - 開發監控與狀態儀表板
  - 實作客戶端應用程式崩潰報告資料的路由
  - 實作工具以追蹤系統使用情況，功能使用情況與程序
  - 整合和設定開發團隊工作管理的票證系統


  ### 模組 14&#58; 基礎結構和設定 Azure 工具
  #### 課程
  - 基礎結構即代碼和設定管理
  - 使用 ARM 範本建立 Azure 資源
  - 使用 Azure CLI 範本建立 Azure 資源
  - 使用 Azure PowerShell 建立 Azure 資源
  - 預期狀態設定(DSC)
  - 具有 DevOps 的 Azure 自動化
  - 其他自動化工具 

  #### 實驗室&#58; 使用資源管理員範本的 Azure 部署

  完成本單元後，學生將能夠&#58;
  - 將基礎結構和設定套用為代碼準則。
  - 使用 Microsoft 自動化技術，例如 ARM 範本，PowerShell 和 Azure CLI，部署和管理基礎結構


  ### 模組 15&#58; Azure 部署模型和服務
  #### 課程
  - 部署模組和選項
  - Azure 基礎結構即服務(IaaS)服務
  - Azure 平台即服務(PaaS)服務
  - 無伺服器和 HPC 電腦服務
  - Azure Service Fabric 

  #### 實驗&#58;將Dockerized Java應用程式部署到Azure Web App for Containers

  完成本單元後，學生將能夠&#58;
  - 描述 Azure 可用的部署模型和服務


  ### 模組 16&#58; 建立和管理 Kubernetes 服務基礎結構
  #### 課程
  - Azure Kubernetes Service

  #### 實驗室&#58; 將多容器應用程式部署到 Azure Kubernetes Service

  完成本單元後，學生將能夠&#58;
  - 部署和設定受管理 Kubernetes 叢集


  ### 模組 17&#58; 提供第三方基礎結構即代碼工具
  #### 課程
  - Chef
  - Puppet
  - Ansible
  - Terraform

  #### 實驗室&#58; 基礎結構即代碼

  #### 實驗室&#58; 使用 Terraform 和 Azure Pipelines 自動化雲端中的基礎結構部署

  完成本單元後，學生將能夠&#58;
  -使用 Azure 的第三方工具和服務來部署和設定基礎結構，例如 Chef，Puppet，Ansible，和 Terraform


  ### 模組 18&#58; 在您的基礎結構中實作合規性和安全性
  #### 課程
  - DevOps 的安全性和合規性準則
  - 描述 Azure 安全中心 

  #### 實驗室&#58; 在 Azure DevOps 管線中實作安全性和合規性

  完成本單元後，學生將能夠&#58;
  - 為發行管線和應用程式基礎結構定義基礎結構和設定策略以及適當的工具組
  - 在您的應用程式基礎結構中實作合規性和安全性


  ### 模組 19&#58; 推薦和設計系統回饋機制
  #### 課程
  - 內部循環
  - 持續實驗的心態
  - 設計最佳做法以衡量終端使用者滿意度
  - 設計流程以擷取和分析使用者回饋
  - 設計流程以自動執行應用程式序分析 

  #### 實驗室&#58; Azure DevOps 與 Teams 之間的整合

  完成本單元後，學生將能夠&#58;
  - 設計最佳做法以衡量終端使用者滿意度
  - 設計流程以擷取和分析來自外部來源的使用者回饋
  - 設計客戶端應用程式崩潰報告資料的路由
  - 建議監視工具與技術
  - 建議系​​統與功能使用情況追蹤工具


  ### 模組 20&#58; 最佳化回饋機制
  #### 課程
  - 網站可靠性工程
  - 分析遙測以建立基準線
  - 執行持續調整以減少無意義或無法運作的警示
  - 分析警示以建立基準線
  - 無過失的追溯和合理的文化 

  完成本單元後，學生將能夠&#58;
  - 分析警示以建立基準線
  - 分析遙測以建立基準線
  - 執行即時網站檢閱並擷取系統中斷的回饋
  - 執行持續調整以減少無意義或無法運作的警示

